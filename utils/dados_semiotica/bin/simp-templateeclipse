#!/usr/bin/env php
<?php
//
// SIMP
// Descricao: Script que cria um template do Eclipse
// Autor: Rubens Takiguti Ribeiro
// Orgao: TecnoLivre - Cooperativa de Tecnologia e Solucoes Livres
// E-mail: rubens@tecnolivre.ufla.br
// Versao: 1.0.0.0
// Data: 02/04/2009
// Modificado: 02/04/2009
// Copyright (C) 2009  Rubens Takiguti Ribeiro
// License: LICENSE.TXT
//

/// Estruturas gerais do PHP

$t['class'] = <<<PHP
class \${classe} {
    \${codigo}
}//class
PHP;

$t['interface'] = <<<PHP
interface \${interface} {
    \${codigo}
}
PHP;

$t['function'] = <<<PHP
//
//     \${descricao}
//
function \${funcao}() {
    \${codigo}
    return ;
}
PHP;

$t['procedure'] = <<<PHP
//
//     \${descricao}
//
function \${procedimento}() {
    \${codigo}
}
PHP;

$t['define'] = <<<PHP
define('\${constante}', \${valor});
PHP;

$t['try'] = <<<PHP
try {
    \${operacoes}
} catch (Exception \$\$e) {
    \${operacoes}
}
PHP;


/// Estruturas de repeticao do PHP

$t['do'] = <<<PHP
do {
    \${operacoes}
} while (\${condicoes});
PHP;

$t['foreach'] = <<<PHP
foreach (\${iteravel} as \${item}) {
    \${operacoes}
}
PHP;

$t['for'] = <<<PHP
for (\${atribuicoes}; \${condicoes}; \${incrementos}) {
    \${operacoes}
}
PHP;

$t['while'] = <<<PHP
while (\${condicoes}) {
    \${operacoes}
}
PHP;


/// Estruturas condicionais do PHP

$t['if'] = <<<PHP
if (\${condicoes}) {
    \${operacoes}
}
PHP;

$t['ife'] = <<<PHP
if (\${condicoes}) {
    \${operacoes}
} else {
    \${operacoes}
}
PHP;

$t['elseif'] = <<<PHP
elseif (\${condicoes}) {
    \${operacoes}
}
PHP;

$t['else'] = <<<PHP
else {
    \${operacoes}
}
PHP;

$t['switch'] = <<<PHP
switch (\${variavel}) {
case \${primeiro_caso}:
    \${operacoes}
    break;
}
PHP;


/// Metodos magicos do PHP


$t['__get'] = <<<PHP
//
//     Obtem um atributo da classe
//
public function __get(\$\$atributo) {
// String \$\$atributo: nome do atributo a ser obtido
//
    \${operacoes}
}
PHP;

$t['__set'] = <<<PHP
//
//     Define o valor de um atributo da classe
//
public function __set(\$\$atributo, \$\$valor) {
// String \$\$atributo: nome do atributo a ser definido
// Mixed \$\$valor: valor do atributo
//
    switch (\$\$atributo) {
    case '\${primeiro caso}':
        \${operacoes}
        break;
    }
}
PHP;

$t['__toString'] = <<<PHP
//
//     Define a forma como um objeto sera exibido
//
public function __toString() {
    \${operacoes}
}
PHP;


/// Atalhos de pontos de extensao do SIMP

$t['get_campo_nome'] = <<<PHP
//
//     Retorna o NOME DO ATRIBUTO (simples, implicito ou relacionamento 1:1) usado para identificar o objeto
//
public function get_campo_nome() {
    return '\${nome_do_campo}';
}
PHP;

$t['validacao_final'] = <<<PHP
//
//     Realiza a validacao final dos dados antes de salva-los (util para validar atributos dependentes)
//
public function validacao_final(&\$\$dados) {
// Object \$\$dados: dados a serem validados
//
    \$\$r = true;
    switch (\$\$this->id_form) {
    case \$\$this->id_formulario_\${inserir}():
        \${operacoes}
        break;
    }
    return \$\$r;
}
PHP;

$t['pre_salvar'] = <<<PHP
//
//     Operacoes realizadas antes de salvar os dados no BD
//
public function pre_salvar(&\$\$salvar_campos) {
// Array[String] \$\$salvar_campos: vetor de campos a serem salvos
//
    \$\$r = true;
    switch (\$\$this->id_form) {
    case \$\$this->id_formulario_\${inserir}():
        \${operacoes}
        break;
    }
    return \$\$r;
}
PHP;

$t['pos_salvar'] = <<<PHP
//
//     Operacoes realizadas apos salvar os dados no BD
//
public function pos_salvar() {
    \$\$r = true;
    switch (\$\$this->id_form) {
    case \$\$this->id_formulario_\${inserir}():
        \${operacoes}
        break;
    }
    return \$\$r;
}
PHP;

$t['dados_opcao'] = <<<PHP
//
//     Retorna um vetor com os dados da opcao (icone) que aparece na lista de entidades
//
public function dados_opcao(\$\$opcao, \$\$modulo) {
// String \$\$opcao: identificador da opcao
// String \$\$modulo: nome do modulo
//
    \$\$dados = new stdClass();

    switch (\$\$opcao) {
    case '\${nome_opcao}':
        \$\$dados->icone     = icone::endereco('\${icone}');
        \$\$dados->arquivo   = '\${arquivo}.php';
        \$\$dados->modulo    = \$\$modulo;
        \$\$dados->descricao = '\${descricao}';
        \$\$dados->id        = '\${id}';
        \$\$dados->class     = '\${class}';
        return \$\$dados;
    }

    return parent::dados_opcao(\$\$opcao, \$\$modulo);
}
PHP;

$t['exibir_atributo'] = <<<PHP
//
//     Define a forma como um atributo simples e' exibido
//
public function exibir_atributo(\$\$nome_atributo) {
// String \$\$nome_atributo: nome do atributo a ser exibido
//
    switch (\$\$nome_atributo) {
    case '\${atributo}':
        \${operacoes}
        return \${retorno};
    }
    return parent::exibir_atributo(\$\$nome_atributo);
}
PHP;

$t['exibir_atributo_implicito'] = <<<PHP
//
//     Define a forma como um atributo implicito e' exibido
//
public function exibir_atributo_implicito(\$\$nome_atributo) {
// String \$\$nome_atributo: nome do atributo implicito a ser exibido
//
    switch (\$\$nome_atributo) {
    case '\${atributo}':
        \${operacoes}
        return \${retorno};
    }
    return parent::exibir_atributo_implicito(\$\$nome_atributo);
}
PHP;

$t['pode_exibir'] = <<<PHP
//
//     Indica se o registro pode ser exibido ou nao por um usuario
//
public function pode_exibir(&\$\$usuario, &\$\$motivo = '') {
// usuario \$\$usuario: usuario a ser testado
// String \$\$motivo: motivo pelo qual nao se pode exibir registro
//
    \$\$r = true;
    if (\${condicao}) {
        \$\$r = false;
        \$\$motivo = '\${motivo}';
    }
    return \$\$r;
}
PHP;

$t['campo_formulario'] = <<<PHP
//
//     Indica como um campo deve ser apresentado no formulario
//
public function campo_formulario(&\$\$form, \$\$campo, \$\$valor) {
// formulario \$\$form: formulario que deve receber o campo
// String \$\$campo: nome do campo a ser inserido
// Mixed \$\$valor: valor padrao do campo
//
    if (\$\$this->possui_atributo(\$\$campo)) {
        \$\$atributo = \$\$this->get_definicao_atributo(\$\$campo);
    }
    switch (\$\$campo) {
    case '\${campo}':
        \$\$form->campo_\${metodo};
        return true;
    }
    return parent::campo_formulario(\$\$form, \$\$campo, \$\$valor);
}
PHP;

$t['pode_ser_manipulado'] = <<<PHP
//
//     Indica se o registro pode ser manipulado pelo usuario
//
public function pode_ser_manipulado(&\$\$usuario) {
// usuario \$\$usuario: usuario a ser testado
//
    \$\$r = false;
    if (\${condicoes}) {
        \$\$r = true;
    }
    return \$\$r;
}
PHP;

$t['pode_acessar_formulario'] = <<<PHP
//
//     Indica se o formulario de um registro pode ser acessado ou nao por um usuario
//
public function pode_acessar_formulario(&\$\$usuario, &\$\$motivo = '') {
// usuario \$\$usuario: usuario a ser testado
// String \$\$motivo: motivo pelo qual nao se pode acessar o registro
//
    \$\$r = true;
    switch (\$\$this->id_form) {
    case \$\$this->id_formulario_\${metodo}():
        if (\${condicoes}) {
            \$\$r = false;
            \$\$motivo = '\${motivo}';
        }
        break;
    }
    return \$\$r;
}
PHP;

$t['get_vetor'] = <<<PHP
//
//     Obtem a lista de \${itens}
//
final public function get_vetor_\${nome_vetor}() {
    return array( => '',
                  => '',
                  => '');
}
PHP;

/// Atalhos gerais do Simp

$t['nav'] = <<<PHP
\$nav[] = '\${modulo}#\${arquivo}';
PHP;

$t['header'] = <<<PHP
setlocale(LC_TIME, 'C');
header("X-Framework: SIMP/".VERSAO_SIMP);
header("Content-Type: \${content_type}");
header("Content-Disposition: inline; filename=\${filename}");
header('Date: '.gmstrftime(\$\$CFG->gmt, \$\$CFG->time));
header('Last-Modified: '.gmstrftime(\$\$CFG->gmt, \${time_modificado}));
header('Expires: '.gmstrftime(\$\$CFG->gmt, \$\$CFG->time));
header('Cache-Control: no-cache, no-store, must-revalidate');
header('Pragma: no-cache');
setlocale(LC_TIME, \$\$CFG->localidade);
PHP;


$xml = <<<XML
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<templates></templates>
XML;

$doc = new SimpleXMLElement($xml);
foreach ($t as $chave => $valor) {
    fwrite(STDOUT, "Atalho: \"{$chave}\"\n");
    $item = $doc->addChild('template', htmlspecialchars($valor));
    $item->addAttribute('autoinsert', 'true');
    $item->addAttribute('context', 'php');
    $item->addAttribute('deleted', 'false');
    $item->addAttribute('description', 'SIMP/'.$chave);
    $item->addAttribute('enabled', 'true');
    $item->addAttribute('name', $chave);
    $item = $valor;
}

file_put_contents('template_simp.xml', $doc->asXML());
fwrite(STDOUT, "Arquivo criado com sucesso: template_simp.xml\n");
exit(0);
