class	class | {\n    \n}//class
interface	interface | {\n    \n}
function	//\n//     \n//\nfunction |() {\n    \n    return ;\n}
procedure	//\n//     \n//\nfunction |() {\n    \n}
define	define('|', );
try	try {\n    |\n} catch (Exception $e) {\n    \n}
do	do {\n    \n} while (|);
foreach	foreach ($| as $ => $) {\n    \n}
for	for (|; ; ) {\n    \n}
while	while (|) {\n    \n}
if	if (|) {\n    \n}
ife	if (|) {\n    \n} else {\n    \n}
elseif	elseif (|) {\n    \n}
else	else {\n    |\n}
switch	switch ($|) {\ncase :\n    \n    break;\n}
__get	//\n//     Obtem um atributo da classe\n//\npublic function __get($atributo) {\n// String $atributo: nome do atributo a ser obtido\n//\n    |\n    return ;\n}
__set	//\n//     Define o valor de um atributo da classe\n//\npublic function __set($atributo, $valor) {\n// String $atributo: nome do atributo a ser definido\n// Mixed $valor: valor do atributo\n//\n    switch ($atributo) {\n    case '|':\n        break;\n    }\n}
__toString	//\n//     Define a forma como um objeto sera exibido\n//\npublic function __toString() {\n    return |;\n}
get_campo_nome	//\n//     Retorna o NOME DO ATRIBUTO (simples, implicito ou relacionamento 1:1) usado para identificar o objeto\n//\npublic function get_campo_nome() {\n    return '|';\n}
validacao_final	//\n//     Realiza a validacao final dos dados antes de salva-los (util para validar atributos dependentes)\n//\npublic function validacao_final(&$dados) {\n// Object $dados: dados a serem validados\n//\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_|():\n        \n        break;\n    }\n    return $r;\n}
pre_salvar	//\n//     Operacoes realizadas antes de salvar os dados no BD\n//\npublic function pre_salvar(&$salvar_campos) {\n// Array[String] $salvar_campos: vetor de campos a serem salvos\n//\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_|():\n        \n        break;\n    }\n    return $r;\n}
pos_salvar	//\n//     Operacoes realizadas apos salvar os dados no BD\n//\npublic function pos_salvar() {\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_|():\n        \n        break;\n    }\n    return $r;\n}
dados_opcao	//\n//     Retorna um vetor com os dados da opcao (icone) que aparece na lista de entidades\n//\npublic function dados_opcao($opcao, $modulo) {\n// String $opcao: identificador da opcao\n// String $modulo: nome do modulo\n//\n    $dados = new stdClass();\n\n    switch ($opcao) {\n    case '|':\n        $dados->icone     = icone::endereco('?');\n        $dados->arquivo   = '?.php';\n        $dados->modulo    = $modulo;\n        $dados->descricao = '?';\n        $dados->id        = '';\n        $dados->class     = '';\n        return $dados;\n    }\n\n    return parent::dados_opcao($opcao, $modulo);\n}
exibir_atributo	//\n//     Define a forma como um atributo simples e' exibido\n//\npublic function exibir_atributo($nome_atributo) {\n// String $nome_atributo: nome do atributo a ser exibido\n//\n    switch ($nome_atributo) {\n    case '|':\n        return ?;\n    }\n    return parent::exibir_atributo($nome_atributo);\n}
exibir_atributo_implicito	//\n//     Define a forma como um atributo implicito e' exibido\n//\npublic function exibir_atributo_implicito($nome_atributo) {\n// String $nome_atributo: nome do atributo implicito a ser exibido\n//\n    switch ($nome_atributo) {\n    case '|':\n        return ?;\n    }\n    return parent::exibir_atributo_implicito($nome_atributo);\n}
pode_exibir	//\n//     Indica se o registro pode ser exibido ou nao por um usuario\n//\npublic function pode_exibir(&$usuario, &$motivo = '') {\n// usuario $usuario: usuario a ser testado\n// String $motivo: motivo pelo qual nao se pode exibir registro\n//\n    $r = true;\n    if (|) {\n        \n        $r = false;\n        $motivo = '';\n    }\n    return $r;\n}
campo_formulario	//\n//     Indica como um campo deve ser apresentado no formulario\n//\npublic function campo_formulario(&$form, $campo, $valor) {\n// formulario $form: formulario que deve receber o campo\n// String $campo: nome do campo a ser inserido\n// Mixed $valor: valor padrao do campo\n//\n    if ($this->possui_atributo($campo)) {\n        $atributo = $this->get_definicao_atributo($campo);\n    }\n    switch ($campo) {\n    case '|':\n        $form->campo_(?);\n        return true;\n    }\n    return parent::campo_formulario($form, $campo, $valor);\n}
pode_ser_manipulado	//\n//     Indica se o registro pode ser manipulado pelo usuario\n//\npublic function pode_ser_manipulado(&$usuario) {\n// usuario $usuario: usuario a ser testado\n//\n    $r = false;\n    if (|) {\n        $r = true;\n    }\n    return $r;\n}
pode_acessar_formulario	//\n//     Indica se o formulario de um registro pode ser acessado ou nao por um usuario\n//\npublic function pode_acessar_formulario(&$usuario, &$motivo = '') {\n// usuario $usuario: usuario a ser testado\n// String $motivo: motivo pelo qual nao se pode acessar o registro\n//\n    $r = true;\n    switch ($this->id_form) {\n    case $this->id_formulario_|():\n        if (?) {\n            $r = false;\n            $motivo = '';\n        }\n        break;\n    }\n    return $r;\n}
converter_componente	// \n//     Converte as componentes de um atributo no respectivo valor do atributo final\n//\nprotected function converter_componente(, , ) {\n// String : nome do campo\n// Mixed : valor do campo\n// Object : valores a serem convertidos\n//\n    switch () {\n    case |:\n        return /* TODO */;\n    }\n    return parent::converter_componente(, , );\n}
get_vetor	//\n//     Obtem a lista de ?\n//\nfinal public function get_vetor_|() {\n    return array( => '',\n                  => '',\n                  => '');\n}
nav	$nav[] = '|#';
header	setlocale(LC_TIME, 'C');\nheader("X-Framework: SIMP/".VERSAO_SIMP);\nheader("Content-Type: |");\nheader("Content-Disposition: inline; filename=?");\nheader('Date: '.gmstrftime($CFG->gmt, $CFG->time));\nheader('Last-Modified: '.gmstrftime($CFG->gmt, filemtime($CFG->dirroot)));\nheader('Expires: '.gmstrftime($CFG->gmt, $CFG->time));\nheader('Cache-Control: no-cache, no-store, must-revalidate');\nheader('Pragma: no-cache');\nsetlocale(LC_TIME, $CFG->localidade);
